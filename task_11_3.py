'''
Задание:
3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
Проверить работу исключения на реальном примере. Запрашивать у пользователя данные и заполнять список необходимо только числами.
Класс-исключение должен контролировать типы данных элементов списка.
Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта, введя, например, команду «stop».
При этом скрипт завершается, сформированный список с числами выводится на экран.
Подсказка: для этого задания примем, что пользователь может вводить только числа и строки.
Во время ввода пользователем очередного элемента необходимо реализовать проверку типа элемента.
Вносить его в список, только если введено число. Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение.
При этом работа скрипта не должна завершаться.
'''

#Решение:

class My_Error(Exception):
    def __init__(self, text):
        self.text = text

result =[]
while True:
    user_input = input('Введите число или строку для формирования списка (для завершения скрипта введите "stop"): ')
    if user_input[0] == '.':
        user_input = '0' + user_input
    if user_input == 'stop':
        print('Работа скрипта завершена!\nЭто ваш итоговый список введенных чисел:')
        print(result)
        break

    try:
        if user_input.find('.') == -1 and user_input.isdigit():
            result.append(int(user_input))
        elif user_input.find('.') != -1 and user_input[user_input.find('.')+1:].find('.') == -1 and user_input[:user_input.find('.')].isdigit() == True:
            result.append(float(user_input))
        else:
            raise My_Error("Вы ввели не число!")
    except My_Error as err:
        print(err)